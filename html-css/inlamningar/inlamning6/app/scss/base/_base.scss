/// -----------------------------------------------------------------------------
/// This file contains very basic styles.
/// -----------------------------------------------------------------------------

/**
 * Set up a decent box model on the root element
 */
html {
  box-sizing: border-box;
}

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
*, *::before, *::after {
  box-sizing: inherit;
} 
.wrapper {
	max-width: 100%;
	margin: 0 auto;
	padding: 0px;
}


/// ***********************************
/// BASE
/// ***********************************

/**
 * Basic styles for links
 */
a {
  color: $brand-color;
  text-decoration: none;
  
  @include on-event {
    color: $text-color;
    text-decoration: underline;
  }
}

body{
  color: map-get($color, bright);
  background: map-get($color, dark);
  background-image: url(../img/2013-06-11_1_Age_NTnails.jpg);
  background-repeat: no-repeat; 
  background-attachment: fixed;
  background-size:cover;
}

img {
  width: 100%;
  height: auto;		
}


/// Loops colors through colormap
@mixin loop-colors {
   @for $i from 1 through length($colors){
      &:nth-child(#{$i}){
         background-color: nth($colors, $i);
      }
   }
}

///Changes property for every 5th element
@mixin fifth{
   @for $i from 1 through 10{
      @if $i % 5 == 0 {
         @include respond-to('medium'){
            &:nth-child(#{$i}){
               flex: 1 1 58%;
            }
         }
      }
   }
}

/// Changes opacity for every 2nd element
@mixin second {
   @for $i from 1 through length($opacities){
      &:nth-child(#{$i}){
         opacity: nth($opacities, $i);
      }
   }
}
